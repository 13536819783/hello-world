import javax.xml.crypto.Data;
import java.io.DataInput;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class HELLO {
    public static void main(String[] args) throws Exception {

        File file = new File("D:javs.txt"); // 创建文件对象
        if (!file.exists()) { // 文件不存在（程序第一次运行时，执行的语句块）
            System.out.println("未在指定目录下找到文件名为“test”的文本文件！正在创建...");
            try {
                file.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            } // 创建该文件
            System.out.println("文件创建成功！");
        } else { // 文件存在（程序第二次运行时，执行的语句块）
            System.out.println("找到文件名为“test”的文本文件！");
            if (file.isFile() && file.canRead()) { // 该文件文件是一个标准文件且该文件可读
                System.out.println("文件可读！正在读取文件信息...");
                String fileName = file.getName(); // 获得文件名
                String filePath = file.getAbsolutePath(); // 获得该文件的绝对路径
                boolean hidden = file.isHidden(); // 获得该文件是否被隐藏
                long len = file.length(); // 获取该文件中的字节数
                long tempTime = file.lastModified(); // 获取该文件最后的修改时间
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss"); // 创建SimpleDateFormat对象，指定目标格式
                Date date = new Date(tempTime); // 使用“文件最后修改时间”创建Date对象
                String time = sdf.format(date); // 格式化“文件最后的修改时间”
                System.out.println("文件名：" + fileName); // 输出文件名
                System.out.println("文件的绝对路径：" + filePath); // 输出文件的绝对路径
                System.out.println("文件是否是隐藏文件：" + hidden); // 输出文件是否被隐藏
                System.out.println("文件中的字节数：" + len); // 输出该文件中的字节数
                System.out.println("文件最后的修改时间：" + time); // 输出该文件最后的修改时间
                file.delete(); // 查完该文件信息后，删除文件
                System.out.println("这个文件的使命结束了！已经被删除了。");
            } else { // 文件不可读
                System.out.println("文件不可读！");
            }
        }
    }
}


package com;

import java.io.File;

public class World {
    public static void main(String[] args) {
        String path = "D:\\Test"; // 声明文件夹Test所在的目录
        for (int i = 1; i <= 10; i++) { // 循环获得i值，并用i命名新的文件夹
            File folder = new File(path + "\\" + i); // 根据新的目录创建File对象
            if (!folder.exists()) { // 文件夹不存在
                folder.mkdirs();// 创建新的文件夹(包括不存在的父文件夹)
            }
        }
        System.out.println("文件夹创建成功，请打开D盘查看！\n");
        File file = new File("D:\\"); // 根据路径名创建File对象
        File[] files = file.listFiles(); // 获得C盘的所有文件和文件夹
        for (File folder : files) { // 遍历files数组
            if (folder.isFile())// 判断是否为文件
                System.out.println(folder.getName() + " 文件"); // 输出D盘下所有文件的名称
            else if (folder.isDirectory())// 判断是否为文件夹
                System.out.println(folder.getName() + " 文件夹"); // 输出D盘下所有文件夹的名称
        }
    }
}
